//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Learnings\ANTLR\RulesEvaluator\SimpleRuleEngine\Console.App\Grammar\RuleSet.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Console.App.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class RuleSetParser : Parser {
	public const int
		T__41=1, T__40=2, T__39=3, T__38=4, T__37=5, T__36=6, T__35=7, T__34=8, 
		T__33=9, T__32=10, T__31=11, T__30=12, T__29=13, T__28=14, T__27=15, T__26=16, 
		T__25=17, T__24=18, T__23=19, T__22=20, T__21=21, T__20=22, T__19=23, 
		T__18=24, T__17=25, T__16=26, T__15=27, T__14=28, T__13=29, T__12=30, 
		T__11=31, T__10=32, T__9=33, T__8=34, T__7=35, T__6=36, T__5=37, T__4=38, 
		T__3=39, T__2=40, T__1=41, T__0=42, INT=43, NUMERIC_VALUE=44, IDENTIFIER=45, 
		RULECOMMENT=46, NEWLINE=47, WS=48;
	public static readonly string[] tokenNames = {
		"<INVALID>", "']'", "')]'", "','", "'-'", "'*'", "' less than '", "'or'", 
		"'['", "'not'", "'('", "') greater than ('", "'<'", "') less than ('", 
		"'is true'", "'@.'", "'''", "'==''", "'includes one'", "'@.length-'", 
		"'is false'", "'and'", "'equals'", "' less than ('", "'contains'", "' equals '", 
		"'[]'", "' greater than '", "')'", "'.'", "'+'", "'$.'", "'[*]'", "' greater than ('", 
		"'&&'", "'[?('", "'||'", "'>'", "'SUM('", "') greater than '", "'/'", 
		"'=='", "') less than '", "INT", "NUMERIC_VALUE", "IDENTIFIER", "RULECOMMENT", 
		"NEWLINE", "WS"
	};
	public const int
		RULE_rule_set = 0, RULE_single_rule = 1, RULE_logical_expr = 2, RULE_specification_expr = 3, 
		RULE_left_arithmetic_expr = 4, RULE_right_arithmetic_expr = 5, RULE_arithmetic_expr = 6, 
		RULE_numeric_expr = 7, RULE_value_expr = 8, RULE_total_expr = 9, RULE_jsonpath_expr = 10, 
		RULE_jsonpath_dotnotation_expr = 11, RULE_dotnotation_expr = 12, RULE_identifierWithQualifier = 13, 
		RULE_query_expr = 14, RULE_string_comparison_value = 15, RULE_string_array = 16;
	public static readonly string[] ruleNames = {
		"rule_set", "single_rule", "logical_expr", "specification_expr", "left_arithmetic_expr", 
		"right_arithmetic_expr", "arithmetic_expr", "numeric_expr", "value_expr", 
		"total_expr", "jsonpath_expr", "jsonpath_dotnotation_expr", "dotnotation_expr", 
		"identifierWithQualifier", "query_expr", "string_comparison_value", "string_array"
	};

	public override string GrammarFileName { get { return "RuleSet.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public RuleSetParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class Rule_setContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(RuleSetParser.NEWLINE); }
		public ITerminalNode Eof() { return GetToken(RuleSetParser.Eof, 0); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(RuleSetParser.NEWLINE, i);
		}
		public Single_ruleContext single_rule(int i) {
			return GetRuleContext<Single_ruleContext>(i);
		}
		public IReadOnlyList<Single_ruleContext> single_rule() {
			return GetRuleContexts<Single_ruleContext>();
		}
		public Rule_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_set; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.EnterRule_set(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.ExitRule_set(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleSetVisitor<TResult> typedVisitor = visitor as IRuleSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_set(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_setContext rule_set() {
		Rule_setContext _localctx = new Rule_setContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_rule_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34; single_rule();
			State = 39;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 35; Match(NEWLINE);
				State = 36; single_rule();
				}
				}
				State = 41;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 42; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_ruleContext : ParserRuleContext {
		public Logical_exprContext logical_expr() {
			return GetRuleContext<Logical_exprContext>(0);
		}
		public ITerminalNode RULECOMMENT() { return GetToken(RuleSetParser.RULECOMMENT, 0); }
		public Single_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_rule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.EnterSingle_rule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.ExitSingle_rule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleSetVisitor<TResult> typedVisitor = visitor as IRuleSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle_rule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Single_ruleContext single_rule() {
		Single_ruleContext _localctx = new Single_ruleContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_single_rule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44; logical_expr(0);
			State = 46;
			_la = _input.La(1);
			if (_la==RULECOMMENT) {
				{
				State = 45; Match(RULECOMMENT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_exprContext : ParserRuleContext {
		public Logical_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_expr; } }
	 
		public Logical_exprContext() { }
		public virtual void CopyFrom(Logical_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LogicalExpressionNotContext : Logical_exprContext {
		public Logical_exprContext logical_expr() {
			return GetRuleContext<Logical_exprContext>(0);
		}
		public LogicalExpressionNotContext(Logical_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.EnterLogicalExpressionNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.ExitLogicalExpressionNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleSetVisitor<TResult> typedVisitor = visitor as IRuleSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalExpressionNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalExpressionAndContext : Logical_exprContext {
		public IReadOnlyList<Logical_exprContext> logical_expr() {
			return GetRuleContexts<Logical_exprContext>();
		}
		public Logical_exprContext logical_expr(int i) {
			return GetRuleContext<Logical_exprContext>(i);
		}
		public LogicalExpressionAndContext(Logical_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.EnterLogicalExpressionAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.ExitLogicalExpressionAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleSetVisitor<TResult> typedVisitor = visitor as IRuleSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalExpressionAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalExpressionOrContext : Logical_exprContext {
		public IReadOnlyList<Logical_exprContext> logical_expr() {
			return GetRuleContexts<Logical_exprContext>();
		}
		public Logical_exprContext logical_expr(int i) {
			return GetRuleContext<Logical_exprContext>(i);
		}
		public LogicalExpressionOrContext(Logical_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.EnterLogicalExpressionOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.ExitLogicalExpressionOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleSetVisitor<TResult> typedVisitor = visitor as IRuleSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalExpressionOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SpecificationExpressionContext : Logical_exprContext {
		public Specification_exprContext specification_expr() {
			return GetRuleContext<Specification_exprContext>(0);
		}
		public SpecificationExpressionContext(Logical_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.EnterSpecificationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.ExitSpecificationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleSetVisitor<TResult> typedVisitor = visitor as IRuleSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecificationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_exprContext logical_expr() {
		return logical_expr(0);
	}

	private Logical_exprContext logical_expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		Logical_exprContext _localctx = new Logical_exprContext(_ctx, _parentState);
		Logical_exprContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_logical_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			switch (_input.La(1)) {
			case T__33:
				{
				_localctx = new LogicalExpressionNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 49; Match(T__33);
				State = 50; logical_expr(2);
				}
				break;
			case T__32:
			case T__11:
			case T__4:
			case INT:
			case NUMERIC_VALUE:
			case IDENTIFIER:
				{
				_localctx = new SpecificationExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 51; specification_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 62;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 60;
					switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
					case 1:
						{
						_localctx = new LogicalExpressionAndContext(new Logical_exprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_logical_expr);
						State = 54;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 55; Match(T__21);
						State = 56; logical_expr(5);
						}
						break;

					case 2:
						{
						_localctx = new LogicalExpressionOrContext(new Logical_exprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_logical_expr);
						State = 57;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 58; Match(T__35);
						State = 59; logical_expr(4);
						}
						break;
					}
					} 
				}
				State = 64;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Specification_exprContext : ParserRuleContext {
		public Specification_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specification_expr; } }
	 
		public Specification_exprContext() { }
		public virtual void CopyFrom(Specification_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumericEqualComparisonSpecificationExpressionContext : Specification_exprContext {
		public IReadOnlyList<Numeric_exprContext> numeric_expr() {
			return GetRuleContexts<Numeric_exprContext>();
		}
		public Numeric_exprContext numeric_expr(int i) {
			return GetRuleContext<Numeric_exprContext>(i);
		}
		public NumericEqualComparisonSpecificationExpressionContext(Specification_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.EnterNumericEqualComparisonSpecificationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.ExitNumericEqualComparisonSpecificationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleSetVisitor<TResult> typedVisitor = visitor as IRuleSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericEqualComparisonSpecificationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumericLessThanComparisonSpecificationExpressionContext : Specification_exprContext {
		public IReadOnlyList<Numeric_exprContext> numeric_expr() {
			return GetRuleContexts<Numeric_exprContext>();
		}
		public Left_arithmetic_exprContext left_arithmetic_expr() {
			return GetRuleContext<Left_arithmetic_exprContext>(0);
		}
		public Numeric_exprContext numeric_expr(int i) {
			return GetRuleContext<Numeric_exprContext>(i);
		}
		public Right_arithmetic_exprContext right_arithmetic_expr() {
			return GetRuleContext<Right_arithmetic_exprContext>(0);
		}
		public NumericLessThanComparisonSpecificationExpressionContext(Specification_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.EnterNumericLessThanComparisonSpecificationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.ExitNumericLessThanComparisonSpecificationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleSetVisitor<TResult> typedVisitor = visitor as IRuleSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLessThanComparisonSpecificationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanIsFalseComparisonSpecificationExpressionContext : Specification_exprContext {
		public Value_exprContext value_expr() {
			return GetRuleContext<Value_exprContext>(0);
		}
		public BooleanIsFalseComparisonSpecificationExpressionContext(Specification_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.EnterBooleanIsFalseComparisonSpecificationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.ExitBooleanIsFalseComparisonSpecificationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleSetVisitor<TResult> typedVisitor = visitor as IRuleSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanIsFalseComparisonSpecificationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContainsComparisonSpecificationExpressionContext : Specification_exprContext {
		public String_comparison_valueContext string_comparison_value() {
			return GetRuleContext<String_comparison_valueContext>(0);
		}
		public Value_exprContext value_expr() {
			return GetRuleContext<Value_exprContext>(0);
		}
		public StringContainsComparisonSpecificationExpressionContext(Specification_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.EnterStringContainsComparisonSpecificationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.ExitStringContainsComparisonSpecificationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleSetVisitor<TResult> typedVisitor = visitor as IRuleSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringContainsComparisonSpecificationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanIsTrueComparisonSpecificationExpressionContext : Specification_exprContext {
		public Value_exprContext value_expr() {
			return GetRuleContext<Value_exprContext>(0);
		}
		public BooleanIsTrueComparisonSpecificationExpressionContext(Specification_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.EnterBooleanIsTrueComparisonSpecificationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.ExitBooleanIsTrueComparisonSpecificationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleSetVisitor<TResult> typedVisitor = visitor as IRuleSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanIsTrueComparisonSpecificationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumericGreaterThanComparisonSpecificationExpressionContext : Specification_exprContext {
		public IReadOnlyList<Numeric_exprContext> numeric_expr() {
			return GetRuleContexts<Numeric_exprContext>();
		}
		public Left_arithmetic_exprContext left_arithmetic_expr() {
			return GetRuleContext<Left_arithmetic_exprContext>(0);
		}
		public Numeric_exprContext numeric_expr(int i) {
			return GetRuleContext<Numeric_exprContext>(i);
		}
		public Right_arithmetic_exprContext right_arithmetic_expr() {
			return GetRuleContext<Right_arithmetic_exprContext>(0);
		}
		public NumericGreaterThanComparisonSpecificationExpressionContext(Specification_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.EnterNumericGreaterThanComparisonSpecificationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.ExitNumericGreaterThanComparisonSpecificationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleSetVisitor<TResult> typedVisitor = visitor as IRuleSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericGreaterThanComparisonSpecificationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayIncludesOneComparisonSpecificationExpressionContext : Specification_exprContext {
		public Value_exprContext value_expr() {
			return GetRuleContext<Value_exprContext>(0);
		}
		public String_arrayContext string_array() {
			return GetRuleContext<String_arrayContext>(0);
		}
		public ArrayIncludesOneComparisonSpecificationExpressionContext(Specification_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.EnterArrayIncludesOneComparisonSpecificationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.ExitArrayIncludesOneComparisonSpecificationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleSetVisitor<TResult> typedVisitor = visitor as IRuleSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayIncludesOneComparisonSpecificationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringEqualsComparisonSpecificationExpressionContext : Specification_exprContext {
		public String_comparison_valueContext string_comparison_value() {
			return GetRuleContext<String_comparison_valueContext>(0);
		}
		public Value_exprContext value_expr() {
			return GetRuleContext<Value_exprContext>(0);
		}
		public StringEqualsComparisonSpecificationExpressionContext(Specification_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.EnterStringEqualsComparisonSpecificationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.ExitStringEqualsComparisonSpecificationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleSetVisitor<TResult> typedVisitor = visitor as IRuleSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringEqualsComparisonSpecificationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TotalledNumericLessThanComparisonSpecificationExpressionContext : Specification_exprContext {
		public Numeric_exprContext numeric_expr() {
			return GetRuleContext<Numeric_exprContext>(0);
		}
		public Right_arithmetic_exprContext right_arithmetic_expr() {
			return GetRuleContext<Right_arithmetic_exprContext>(0);
		}
		public Jsonpath_exprContext jsonpath_expr() {
			return GetRuleContext<Jsonpath_exprContext>(0);
		}
		public TotalledNumericLessThanComparisonSpecificationExpressionContext(Specification_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.EnterTotalledNumericLessThanComparisonSpecificationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.ExitTotalledNumericLessThanComparisonSpecificationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleSetVisitor<TResult> typedVisitor = visitor as IRuleSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTotalledNumericLessThanComparisonSpecificationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TotalledNumericGreaterThanComparisonSpecificationExpressionContext : Specification_exprContext {
		public Numeric_exprContext numeric_expr() {
			return GetRuleContext<Numeric_exprContext>(0);
		}
		public Right_arithmetic_exprContext right_arithmetic_expr() {
			return GetRuleContext<Right_arithmetic_exprContext>(0);
		}
		public Jsonpath_exprContext jsonpath_expr() {
			return GetRuleContext<Jsonpath_exprContext>(0);
		}
		public TotalledNumericGreaterThanComparisonSpecificationExpressionContext(Specification_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.EnterTotalledNumericGreaterThanComparisonSpecificationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.ExitTotalledNumericGreaterThanComparisonSpecificationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleSetVisitor<TResult> typedVisitor = visitor as IRuleSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTotalledNumericGreaterThanComparisonSpecificationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Specification_exprContext specification_expr() {
		Specification_exprContext _localctx = new Specification_exprContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_specification_expr);
		try {
			State = 153;
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				_localctx = new TotalledNumericGreaterThanComparisonSpecificationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 65; Match(T__4);
				State = 66; jsonpath_expr();
				State = 67; Match(T__31);
				State = 68; right_arithmetic_expr();
				State = 69; Match(T__14);
				}
				break;

			case 2:
				_localctx = new TotalledNumericGreaterThanComparisonSpecificationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 71; Match(T__4);
				State = 72; jsonpath_expr();
				State = 73; Match(T__3);
				State = 74; numeric_expr();
				}
				break;

			case 3:
				_localctx = new NumericGreaterThanComparisonSpecificationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 76; Match(T__32);
				State = 77; left_arithmetic_expr();
				State = 78; Match(T__31);
				State = 79; right_arithmetic_expr();
				State = 80; Match(T__14);
				}
				break;

			case 4:
				_localctx = new NumericGreaterThanComparisonSpecificationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 82; Match(T__32);
				State = 83; left_arithmetic_expr();
				State = 84; Match(T__3);
				State = 85; numeric_expr();
				}
				break;

			case 5:
				_localctx = new NumericGreaterThanComparisonSpecificationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 87; numeric_expr();
				State = 88; Match(T__15);
				State = 89; numeric_expr();
				}
				break;

			case 6:
				_localctx = new NumericGreaterThanComparisonSpecificationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 91; numeric_expr();
				State = 92; Match(T__9);
				State = 93; right_arithmetic_expr();
				State = 94; Match(T__14);
				}
				break;

			case 7:
				_localctx = new NumericGreaterThanComparisonSpecificationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 96; numeric_expr();
				State = 97; Match(T__15);
				State = 98; numeric_expr();
				}
				break;

			case 8:
				_localctx = new TotalledNumericLessThanComparisonSpecificationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 100; Match(T__4);
				State = 101; jsonpath_expr();
				State = 102; Match(T__29);
				State = 103; right_arithmetic_expr();
				State = 104; Match(T__14);
				}
				break;

			case 9:
				_localctx = new TotalledNumericLessThanComparisonSpecificationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 106; Match(T__4);
				State = 107; jsonpath_expr();
				State = 108; Match(T__0);
				State = 109; numeric_expr();
				}
				break;

			case 10:
				_localctx = new NumericLessThanComparisonSpecificationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 111; Match(T__32);
				State = 112; left_arithmetic_expr();
				State = 113; Match(T__29);
				State = 114; right_arithmetic_expr();
				State = 115; Match(T__14);
				}
				break;

			case 11:
				_localctx = new NumericLessThanComparisonSpecificationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 117; Match(T__32);
				State = 118; left_arithmetic_expr();
				State = 119; Match(T__0);
				State = 120; numeric_expr();
				}
				break;

			case 12:
				_localctx = new NumericLessThanComparisonSpecificationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 122; numeric_expr();
				State = 123; Match(T__19);
				State = 124; right_arithmetic_expr();
				State = 125; Match(T__14);
				}
				break;

			case 13:
				_localctx = new NumericLessThanComparisonSpecificationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 127; numeric_expr();
				State = 128; Match(T__36);
				State = 129; numeric_expr();
				}
				break;

			case 14:
				_localctx = new NumericEqualComparisonSpecificationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 131; numeric_expr();
				State = 132; Match(T__17);
				State = 133; numeric_expr();
				}
				break;

			case 15:
				_localctx = new StringEqualsComparisonSpecificationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 135; value_expr();
				State = 136; Match(T__20);
				State = 137; string_comparison_value();
				}
				break;

			case 16:
				_localctx = new StringContainsComparisonSpecificationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 139; value_expr();
				State = 140; Match(T__18);
				State = 141; string_comparison_value();
				}
				break;

			case 17:
				_localctx = new BooleanIsTrueComparisonSpecificationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 143; value_expr();
				State = 144; Match(T__28);
				}
				break;

			case 18:
				_localctx = new BooleanIsFalseComparisonSpecificationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 146; value_expr();
				State = 147; Match(T__22);
				}
				break;

			case 19:
				_localctx = new ArrayIncludesOneComparisonSpecificationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 149; value_expr();
				State = 150; Match(T__24);
				State = 151; string_array();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Left_arithmetic_exprContext : ParserRuleContext {
		public Arithmetic_exprContext arithmetic_expr() {
			return GetRuleContext<Arithmetic_exprContext>(0);
		}
		public Left_arithmetic_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_left_arithmetic_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.EnterLeft_arithmetic_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.ExitLeft_arithmetic_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleSetVisitor<TResult> typedVisitor = visitor as IRuleSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeft_arithmetic_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Left_arithmetic_exprContext left_arithmetic_expr() {
		Left_arithmetic_exprContext _localctx = new Left_arithmetic_exprContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_left_arithmetic_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; arithmetic_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Right_arithmetic_exprContext : ParserRuleContext {
		public Arithmetic_exprContext arithmetic_expr() {
			return GetRuleContext<Arithmetic_exprContext>(0);
		}
		public Right_arithmetic_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right_arithmetic_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.EnterRight_arithmetic_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.ExitRight_arithmetic_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleSetVisitor<TResult> typedVisitor = visitor as IRuleSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_arithmetic_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Right_arithmetic_exprContext right_arithmetic_expr() {
		Right_arithmetic_exprContext _localctx = new Right_arithmetic_exprContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_right_arithmetic_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; arithmetic_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arithmetic_exprContext : ParserRuleContext {
		public Arithmetic_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmetic_expr; } }
	 
		public Arithmetic_exprContext() { }
		public virtual void CopyFrom(Arithmetic_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArithmeticExpressionMultContext : Arithmetic_exprContext {
		public IReadOnlyList<Arithmetic_exprContext> arithmetic_expr() {
			return GetRuleContexts<Arithmetic_exprContext>();
		}
		public Arithmetic_exprContext arithmetic_expr(int i) {
			return GetRuleContext<Arithmetic_exprContext>(i);
		}
		public ArithmeticExpressionMultContext(Arithmetic_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.EnterArithmeticExpressionMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.ExitArithmeticExpressionMult(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleSetVisitor<TResult> typedVisitor = visitor as IRuleSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticExpressionMult(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticExpressionNumericEntityContext : Arithmetic_exprContext {
		public Numeric_exprContext numeric_expr() {
			return GetRuleContext<Numeric_exprContext>(0);
		}
		public ArithmeticExpressionNumericEntityContext(Arithmetic_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.EnterArithmeticExpressionNumericEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.ExitArithmeticExpressionNumericEntity(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleSetVisitor<TResult> typedVisitor = visitor as IRuleSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticExpressionNumericEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticExpressionMinusContext : Arithmetic_exprContext {
		public IReadOnlyList<Arithmetic_exprContext> arithmetic_expr() {
			return GetRuleContexts<Arithmetic_exprContext>();
		}
		public Arithmetic_exprContext arithmetic_expr(int i) {
			return GetRuleContext<Arithmetic_exprContext>(i);
		}
		public ArithmeticExpressionMinusContext(Arithmetic_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.EnterArithmeticExpressionMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.ExitArithmeticExpressionMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleSetVisitor<TResult> typedVisitor = visitor as IRuleSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticExpressionMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticExpressionPlusContext : Arithmetic_exprContext {
		public IReadOnlyList<Arithmetic_exprContext> arithmetic_expr() {
			return GetRuleContexts<Arithmetic_exprContext>();
		}
		public Arithmetic_exprContext arithmetic_expr(int i) {
			return GetRuleContext<Arithmetic_exprContext>(i);
		}
		public ArithmeticExpressionPlusContext(Arithmetic_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.EnterArithmeticExpressionPlus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.ExitArithmeticExpressionPlus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleSetVisitor<TResult> typedVisitor = visitor as IRuleSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticExpressionPlus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticExpressionDivContext : Arithmetic_exprContext {
		public IReadOnlyList<Arithmetic_exprContext> arithmetic_expr() {
			return GetRuleContexts<Arithmetic_exprContext>();
		}
		public Arithmetic_exprContext arithmetic_expr(int i) {
			return GetRuleContext<Arithmetic_exprContext>(i);
		}
		public ArithmeticExpressionDivContext(Arithmetic_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.EnterArithmeticExpressionDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.ExitArithmeticExpressionDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleSetVisitor<TResult> typedVisitor = visitor as IRuleSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticExpressionDiv(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arithmetic_exprContext arithmetic_expr() {
		return arithmetic_expr(0);
	}

	private Arithmetic_exprContext arithmetic_expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		Arithmetic_exprContext _localctx = new Arithmetic_exprContext(_ctx, _parentState);
		Arithmetic_exprContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_arithmetic_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ArithmeticExpressionNumericEntityContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			State = 160; numeric_expr();
			}
			_ctx.stop = _input.Lt(-1);
			State = 176;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 174;
					switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
					case 1:
						{
						_localctx = new ArithmeticExpressionMultContext(new Arithmetic_exprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expr);
						State = 162;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 163; Match(T__37);
						State = 164; arithmetic_expr(6);
						}
						break;

					case 2:
						{
						_localctx = new ArithmeticExpressionDivContext(new Arithmetic_exprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expr);
						State = 165;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 166; Match(T__2);
						State = 167; arithmetic_expr(5);
						}
						break;

					case 3:
						{
						_localctx = new ArithmeticExpressionPlusContext(new Arithmetic_exprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expr);
						State = 168;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 169; Match(T__12);
						State = 170; arithmetic_expr(4);
						}
						break;

					case 4:
						{
						_localctx = new ArithmeticExpressionMinusContext(new Arithmetic_exprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expr);
						State = 171;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 172; Match(T__38);
						State = 173; arithmetic_expr(3);
						}
						break;
					}
					} 
				}
				State = 178;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Numeric_exprContext : ParserRuleContext {
		public Numeric_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_expr; } }
	 
		public Numeric_exprContext() { }
		public virtual void CopyFrom(Numeric_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JsonPathExpressionContext : Numeric_exprContext {
		public ITerminalNode IDENTIFIER() { return GetToken(RuleSetParser.IDENTIFIER, 0); }
		public Jsonpath_exprContext jsonpath_expr() {
			return GetRuleContext<Jsonpath_exprContext>(0);
		}
		public JsonPathExpressionContext(Numeric_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.EnterJsonPathExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.ExitJsonPathExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleSetVisitor<TResult> typedVisitor = visitor as IRuleSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonPathExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumericConstantContext : Numeric_exprContext {
		public ITerminalNode INT() { return GetToken(RuleSetParser.INT, 0); }
		public ITerminalNode NUMERIC_VALUE() { return GetToken(RuleSetParser.NUMERIC_VALUE, 0); }
		public NumericConstantContext(Numeric_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.EnterNumericConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.ExitNumericConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleSetVisitor<TResult> typedVisitor = visitor as IRuleSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericConstant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TotalledJsonPathExpressionContext : Numeric_exprContext {
		public Total_exprContext total_expr() {
			return GetRuleContext<Total_exprContext>(0);
		}
		public TotalledJsonPathExpressionContext(Numeric_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.EnterTotalledJsonPathExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.ExitTotalledJsonPathExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleSetVisitor<TResult> typedVisitor = visitor as IRuleSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTotalledJsonPathExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_exprContext numeric_expr() {
		Numeric_exprContext _localctx = new Numeric_exprContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_numeric_expr);
		try {
			State = 184;
			switch (_input.La(1)) {
			case T__4:
				_localctx = new TotalledJsonPathExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 179; total_expr();
				}
				break;
			case T__11:
				_localctx = new JsonPathExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 180; jsonpath_expr();
				}
				break;
			case IDENTIFIER:
				_localctx = new JsonPathExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 181; Match(IDENTIFIER);
				}
				break;
			case NUMERIC_VALUE:
				_localctx = new NumericConstantContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 182; Match(NUMERIC_VALUE);
				}
				break;
			case INT:
				_localctx = new NumericConstantContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 183; Match(INT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_exprContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(RuleSetParser.IDENTIFIER, 0); }
		public Jsonpath_exprContext jsonpath_expr() {
			return GetRuleContext<Jsonpath_exprContext>(0);
		}
		public Value_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.EnterValue_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.ExitValue_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleSetVisitor<TResult> typedVisitor = visitor as IRuleSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_exprContext value_expr() {
		Value_exprContext _localctx = new Value_exprContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_value_expr);
		try {
			State = 188;
			switch (_input.La(1)) {
			case T__11:
				EnterOuterAlt(_localctx, 1);
				{
				State = 186; jsonpath_expr();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 187; Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Total_exprContext : ParserRuleContext {
		public Jsonpath_exprContext jsonpath_expr() {
			return GetRuleContext<Jsonpath_exprContext>(0);
		}
		public Total_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_total_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.EnterTotal_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.ExitTotal_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleSetVisitor<TResult> typedVisitor = visitor as IRuleSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTotal_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Total_exprContext total_expr() {
		Total_exprContext _localctx = new Total_exprContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_total_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190; Match(T__4);
			State = 191; jsonpath_expr();
			State = 192; Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jsonpath_exprContext : ParserRuleContext {
		public Jsonpath_dotnotation_exprContext jsonpath_dotnotation_expr() {
			return GetRuleContext<Jsonpath_dotnotation_exprContext>(0);
		}
		public Jsonpath_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonpath_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.EnterJsonpath_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.ExitJsonpath_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleSetVisitor<TResult> typedVisitor = visitor as IRuleSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonpath_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Jsonpath_exprContext jsonpath_expr() {
		Jsonpath_exprContext _localctx = new Jsonpath_exprContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_jsonpath_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194; jsonpath_dotnotation_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jsonpath_dotnotation_exprContext : ParserRuleContext {
		public Dotnotation_exprContext dotnotation_expr(int i) {
			return GetRuleContext<Dotnotation_exprContext>(i);
		}
		public IReadOnlyList<Dotnotation_exprContext> dotnotation_expr() {
			return GetRuleContexts<Dotnotation_exprContext>();
		}
		public Jsonpath_dotnotation_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonpath_dotnotation_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.EnterJsonpath_dotnotation_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.ExitJsonpath_dotnotation_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleSetVisitor<TResult> typedVisitor = visitor as IRuleSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonpath_dotnotation_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Jsonpath_dotnotation_exprContext jsonpath_dotnotation_expr() {
		Jsonpath_dotnotation_exprContext _localctx = new Jsonpath_dotnotation_exprContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_jsonpath_dotnotation_expr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; Match(T__11);
			State = 197; dotnotation_expr();
			State = 202;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 198; Match(T__13);
					State = 199; dotnotation_expr();
					}
					} 
				}
				State = 204;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dotnotation_exprContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(RuleSetParser.IDENTIFIER, 0); }
		public IdentifierWithQualifierContext identifierWithQualifier() {
			return GetRuleContext<IdentifierWithQualifierContext>(0);
		}
		public Dotnotation_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotnotation_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.EnterDotnotation_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.ExitDotnotation_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleSetVisitor<TResult> typedVisitor = visitor as IRuleSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotnotation_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dotnotation_exprContext dotnotation_expr() {
		Dotnotation_exprContext _localctx = new Dotnotation_exprContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_dotnotation_expr);
		try {
			State = 207;
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 205; identifierWithQualifier();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 206; Match(IDENTIFIER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierWithQualifierContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(RuleSetParser.INT, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(RuleSetParser.IDENTIFIER, 0); }
		public Query_exprContext query_expr() {
			return GetRuleContext<Query_exprContext>(0);
		}
		public IdentifierWithQualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierWithQualifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.EnterIdentifierWithQualifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.ExitIdentifierWithQualifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleSetVisitor<TResult> typedVisitor = visitor as IRuleSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierWithQualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierWithQualifierContext identifierWithQualifier() {
		IdentifierWithQualifierContext _localctx = new IdentifierWithQualifierContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_identifierWithQualifier);
		try {
			State = 222;
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 209; Match(IDENTIFIER);
				State = 210; Match(T__16);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 211; Match(IDENTIFIER);
				State = 212; Match(T__10);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 213; Match(IDENTIFIER);
				State = 214; Match(T__34);
				State = 215; Match(INT);
				State = 216; Match(T__41);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 217; Match(IDENTIFIER);
				State = 218; Match(T__7);
				State = 219; query_expr(0);
				State = 220; Match(T__40);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_exprContext : ParserRuleContext {
		public Query_exprContext query_expr(int i) {
			return GetRuleContext<Query_exprContext>(i);
		}
		public ITerminalNode INT() { return GetToken(RuleSetParser.INT, 0); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(RuleSetParser.IDENTIFIER, i);
		}
		public IReadOnlyList<ITerminalNode> IDENTIFIER() { return GetTokens(RuleSetParser.IDENTIFIER); }
		public IReadOnlyList<Query_exprContext> query_expr() {
			return GetRuleContexts<Query_exprContext>();
		}
		public Query_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.EnterQuery_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.ExitQuery_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleSetVisitor<TResult> typedVisitor = visitor as IRuleSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_exprContext query_expr() {
		return query_expr(0);
	}

	private Query_exprContext query_expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		Query_exprContext _localctx = new Query_exprContext(_ctx, _parentState);
		Query_exprContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_query_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				{
				State = 225; Match(T__27);
				State = 226; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 227; Match(T__27);
				State = 228; Match(IDENTIFIER);
				State = 229; Match(T__5);
				State = 230; Match(INT);
				}
				break;

			case 3:
				{
				State = 231; Match(T__27);
				State = 232; Match(IDENTIFIER);
				State = 233; Match(T__30);
				State = 234; Match(INT);
				}
				break;

			case 4:
				{
				State = 235; Match(T__23);
				State = 236; Match(INT);
				}
				break;

			case 5:
				{
				State = 237; Match(T__27);
				State = 238; Match(IDENTIFIER);
				State = 239; Match(T__1);
				State = 240; Match(INT);
				}
				break;

			case 6:
				{
				State = 241; Match(T__27);
				State = 242; Match(IDENTIFIER);
				State = 243; Match(T__25);
				State = 244; Match(IDENTIFIER);
				State = 245; Match(T__26);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 264;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 262;
					switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
					case 1:
						{
						_localctx = new Query_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_query_expr);
						State = 248;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 251;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 249; Match(T__8);
								State = 250; query_expr(0);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 253;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,14,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						}
						break;

					case 2:
						{
						_localctx = new Query_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_query_expr);
						State = 255;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 258;
						_errHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 256; Match(T__6);
								State = 257; query_expr(0);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 260;
							_errHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						}
						break;
					}
					} 
				}
				State = 266;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class String_comparison_valueContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(RuleSetParser.INT, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(RuleSetParser.IDENTIFIER, 0); }
		public ITerminalNode NUMERIC_VALUE() { return GetToken(RuleSetParser.NUMERIC_VALUE, 0); }
		public String_comparison_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_comparison_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.EnterString_comparison_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.ExitString_comparison_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleSetVisitor<TResult> typedVisitor = visitor as IRuleSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_comparison_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_comparison_valueContext string_comparison_value() {
		String_comparison_valueContext _localctx = new String_comparison_valueContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_string_comparison_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << NUMERIC_VALUE) | (1L << IDENTIFIER))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_arrayContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(RuleSetParser.IDENTIFIER, i);
		}
		public IReadOnlyList<ITerminalNode> IDENTIFIER() { return GetTokens(RuleSetParser.IDENTIFIER); }
		public String_arrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.EnterString_array(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRuleSetListener typedListener = listener as IRuleSetListener;
			if (typedListener != null) typedListener.ExitString_array(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRuleSetVisitor<TResult> typedVisitor = visitor as IRuleSetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_array(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_arrayContext string_array() {
		String_arrayContext _localctx = new String_arrayContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_string_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269; Match(T__32);
			State = 270; Match(IDENTIFIER);
			State = 275;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__39) {
				{
				{
				State = 271; Match(T__39);
				State = 272; Match(IDENTIFIER);
				}
				}
				State = 277;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 278; Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return logical_expr_sempred((Logical_exprContext)_localctx, predIndex);

		case 6: return arithmetic_expr_sempred((Arithmetic_exprContext)_localctx, predIndex);

		case 14: return query_expr_sempred((Query_exprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool query_expr_sempred(Query_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(_ctx, 8);

		case 7: return Precpred(_ctx, 7);
		}
		return true;
	}
	private bool arithmetic_expr_sempred(Arithmetic_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 5);

		case 3: return Precpred(_ctx, 4);

		case 4: return Precpred(_ctx, 3);

		case 5: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool logical_expr_sempred(Logical_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 4);

		case 1: return Precpred(_ctx, 3);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x32\x11B\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x3\x2\x3\x2\x3\x2\a\x2(\n\x2\f\x2\xE"+
		"\x2+\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x5\x3\x31\n\x3\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x5\x4\x37\n\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\a\x4?\n\x4\f\x4"+
		"\xE\x4\x42\v\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\x9C"+
		"\n\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\a\b\xB1\n\b\f\b\xE\b\xB4\v\b\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x5\t\xBB\n\t\x3\n\x3\n\x5\n\xBF\n\n\x3\v\x3\v\x3\v\x3"+
		"\v\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\a\r\xCB\n\r\f\r\xE\r\xCE\v\r\x3\xE\x3"+
		"\xE\x5\xE\xD2\n\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\xE1\n\xF\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\xF9\n"+
		"\x10\x3\x10\x3\x10\x3\x10\x6\x10\xFE\n\x10\r\x10\xE\x10\xFF\x3\x10\x3"+
		"\x10\x3\x10\x6\x10\x105\n\x10\r\x10\xE\x10\x106\a\x10\x109\n\x10\f\x10"+
		"\xE\x10\x10C\v\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\a\x12\x114"+
		"\n\x12\f\x12\xE\x12\x117\v\x12\x3\x12\x3\x12\x3\x12\x2\x2\x5\x6\xE\x1E"+
		"\x13\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2"+
		"\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2\x2\x3\x3\x2-/\x138\x2$\x3\x2\x2"+
		"\x2\x4.\x3\x2\x2\x2\x6\x36\x3\x2\x2\x2\b\x9B\x3\x2\x2\x2\n\x9D\x3\x2\x2"+
		"\x2\f\x9F\x3\x2\x2\x2\xE\xA1\x3\x2\x2\x2\x10\xBA\x3\x2\x2\x2\x12\xBE\x3"+
		"\x2\x2\x2\x14\xC0\x3\x2\x2\x2\x16\xC4\x3\x2\x2\x2\x18\xC6\x3\x2\x2\x2"+
		"\x1A\xD1\x3\x2\x2\x2\x1C\xE0\x3\x2\x2\x2\x1E\xF8\x3\x2\x2\x2 \x10D\x3"+
		"\x2\x2\x2\"\x10F\x3\x2\x2\x2$)\x5\x4\x3\x2%&\a\x31\x2\x2&(\x5\x4\x3\x2"+
		"\'%\x3\x2\x2\x2(+\x3\x2\x2\x2)\'\x3\x2\x2\x2)*\x3\x2\x2\x2*,\x3\x2\x2"+
		"\x2+)\x3\x2\x2\x2,-\a\x2\x2\x3-\x3\x3\x2\x2\x2.\x30\x5\x6\x4\x2/\x31\a"+
		"\x30\x2\x2\x30/\x3\x2\x2\x2\x30\x31\x3\x2\x2\x2\x31\x5\x3\x2\x2\x2\x32"+
		"\x33\b\x4\x1\x2\x33\x34\a\v\x2\x2\x34\x37\x5\x6\x4\x4\x35\x37\x5\b\x5"+
		"\x2\x36\x32\x3\x2\x2\x2\x36\x35\x3\x2\x2\x2\x37@\x3\x2\x2\x2\x38\x39\f"+
		"\x6\x2\x2\x39:\a\x17\x2\x2:?\x5\x6\x4\a;<\f\x5\x2\x2<=\a\t\x2\x2=?\x5"+
		"\x6\x4\x6>\x38\x3\x2\x2\x2>;\x3\x2\x2\x2?\x42\x3\x2\x2\x2@>\x3\x2\x2\x2"+
		"@\x41\x3\x2\x2\x2\x41\a\x3\x2\x2\x2\x42@\x3\x2\x2\x2\x43\x44\a(\x2\x2"+
		"\x44\x45\x5\x16\f\x2\x45\x46\a\r\x2\x2\x46G\x5\f\a\x2GH\a\x1E\x2\x2H\x9C"+
		"\x3\x2\x2\x2IJ\a(\x2\x2JK\x5\x16\f\x2KL\a)\x2\x2LM\x5\x10\t\x2M\x9C\x3"+
		"\x2\x2\x2NO\a\f\x2\x2OP\x5\n\x6\x2PQ\a\r\x2\x2QR\x5\f\a\x2RS\a\x1E\x2"+
		"\x2S\x9C\x3\x2\x2\x2TU\a\f\x2\x2UV\x5\n\x6\x2VW\a)\x2\x2WX\x5\x10\t\x2"+
		"X\x9C\x3\x2\x2\x2YZ\x5\x10\t\x2Z[\a\x1D\x2\x2[\\\x5\x10\t\x2\\\x9C\x3"+
		"\x2\x2\x2]^\x5\x10\t\x2^_\a#\x2\x2_`\x5\f\a\x2`\x61\a\x1E\x2\x2\x61\x9C"+
		"\x3\x2\x2\x2\x62\x63\x5\x10\t\x2\x63\x64\a\x1D\x2\x2\x64\x65\x5\x10\t"+
		"\x2\x65\x9C\x3\x2\x2\x2\x66g\a(\x2\x2gh\x5\x16\f\x2hi\a\xF\x2\x2ij\x5"+
		"\f\a\x2jk\a\x1E\x2\x2k\x9C\x3\x2\x2\x2lm\a(\x2\x2mn\x5\x16\f\x2no\a,\x2"+
		"\x2op\x5\x10\t\x2p\x9C\x3\x2\x2\x2qr\a\f\x2\x2rs\x5\n\x6\x2st\a\xF\x2"+
		"\x2tu\x5\f\a\x2uv\a\x1E\x2\x2v\x9C\x3\x2\x2\x2wx\a\f\x2\x2xy\x5\n\x6\x2"+
		"yz\a,\x2\x2z{\x5\x10\t\x2{\x9C\x3\x2\x2\x2|}\x5\x10\t\x2}~\a\x19\x2\x2"+
		"~\x7F\x5\f\a\x2\x7F\x80\a\x1E\x2\x2\x80\x9C\x3\x2\x2\x2\x81\x82\x5\x10"+
		"\t\x2\x82\x83\a\b\x2\x2\x83\x84\x5\x10\t\x2\x84\x9C\x3\x2\x2\x2\x85\x86"+
		"\x5\x10\t\x2\x86\x87\a\x1B\x2\x2\x87\x88\x5\x10\t\x2\x88\x9C\x3\x2\x2"+
		"\x2\x89\x8A\x5\x12\n\x2\x8A\x8B\a\x18\x2\x2\x8B\x8C\x5 \x11\x2\x8C\x9C"+
		"\x3\x2\x2\x2\x8D\x8E\x5\x12\n\x2\x8E\x8F\a\x1A\x2\x2\x8F\x90\x5 \x11\x2"+
		"\x90\x9C\x3\x2\x2\x2\x91\x92\x5\x12\n\x2\x92\x93\a\x10\x2\x2\x93\x9C\x3"+
		"\x2\x2\x2\x94\x95\x5\x12\n\x2\x95\x96\a\x16\x2\x2\x96\x9C\x3\x2\x2\x2"+
		"\x97\x98\x5\x12\n\x2\x98\x99\a\x14\x2\x2\x99\x9A\x5\"\x12\x2\x9A\x9C\x3"+
		"\x2\x2\x2\x9B\x43\x3\x2\x2\x2\x9BI\x3\x2\x2\x2\x9BN\x3\x2\x2\x2\x9BT\x3"+
		"\x2\x2\x2\x9BY\x3\x2\x2\x2\x9B]\x3\x2\x2\x2\x9B\x62\x3\x2\x2\x2\x9B\x66"+
		"\x3\x2\x2\x2\x9Bl\x3\x2\x2\x2\x9Bq\x3\x2\x2\x2\x9Bw\x3\x2\x2\x2\x9B|\x3"+
		"\x2\x2\x2\x9B\x81\x3\x2\x2\x2\x9B\x85\x3\x2\x2\x2\x9B\x89\x3\x2\x2\x2"+
		"\x9B\x8D\x3\x2\x2\x2\x9B\x91\x3\x2\x2\x2\x9B\x94\x3\x2\x2\x2\x9B\x97\x3"+
		"\x2\x2\x2\x9C\t\x3\x2\x2\x2\x9D\x9E\x5\xE\b\x2\x9E\v\x3\x2\x2\x2\x9F\xA0"+
		"\x5\xE\b\x2\xA0\r\x3\x2\x2\x2\xA1\xA2\b\b\x1\x2\xA2\xA3\x5\x10\t\x2\xA3"+
		"\xB2\x3\x2\x2\x2\xA4\xA5\f\a\x2\x2\xA5\xA6\a\a\x2\x2\xA6\xB1\x5\xE\b\b"+
		"\xA7\xA8\f\x6\x2\x2\xA8\xA9\a*\x2\x2\xA9\xB1\x5\xE\b\a\xAA\xAB\f\x5\x2"+
		"\x2\xAB\xAC\a \x2\x2\xAC\xB1\x5\xE\b\x6\xAD\xAE\f\x4\x2\x2\xAE\xAF\a\x6"+
		"\x2\x2\xAF\xB1\x5\xE\b\x5\xB0\xA4\x3\x2\x2\x2\xB0\xA7\x3\x2\x2\x2\xB0"+
		"\xAA\x3\x2\x2\x2\xB0\xAD\x3\x2\x2\x2\xB1\xB4\x3\x2\x2\x2\xB2\xB0\x3\x2"+
		"\x2\x2\xB2\xB3\x3\x2\x2\x2\xB3\xF\x3\x2\x2\x2\xB4\xB2\x3\x2\x2\x2\xB5"+
		"\xBB\x5\x14\v\x2\xB6\xBB\x5\x16\f\x2\xB7\xBB\a/\x2\x2\xB8\xBB\a.\x2\x2"+
		"\xB9\xBB\a-\x2\x2\xBA\xB5\x3\x2\x2\x2\xBA\xB6\x3\x2\x2\x2\xBA\xB7\x3\x2"+
		"\x2\x2\xBA\xB8\x3\x2\x2\x2\xBA\xB9\x3\x2\x2\x2\xBB\x11\x3\x2\x2\x2\xBC"+
		"\xBF\x5\x16\f\x2\xBD\xBF\a/\x2\x2\xBE\xBC\x3\x2\x2\x2\xBE\xBD\x3\x2\x2"+
		"\x2\xBF\x13\x3\x2\x2\x2\xC0\xC1\a(\x2\x2\xC1\xC2\x5\x16\f\x2\xC2\xC3\a"+
		"\x1E\x2\x2\xC3\x15\x3\x2\x2\x2\xC4\xC5\x5\x18\r\x2\xC5\x17\x3\x2\x2\x2"+
		"\xC6\xC7\a!\x2\x2\xC7\xCC\x5\x1A\xE\x2\xC8\xC9\a\x1F\x2\x2\xC9\xCB\x5"+
		"\x1A\xE\x2\xCA\xC8\x3\x2\x2\x2\xCB\xCE\x3\x2\x2\x2\xCC\xCA\x3\x2\x2\x2"+
		"\xCC\xCD\x3\x2\x2\x2\xCD\x19\x3\x2\x2\x2\xCE\xCC\x3\x2\x2\x2\xCF\xD2\x5"+
		"\x1C\xF\x2\xD0\xD2\a/\x2\x2\xD1\xCF\x3\x2\x2\x2\xD1\xD0\x3\x2\x2\x2\xD2"+
		"\x1B\x3\x2\x2\x2\xD3\xD4\a/\x2\x2\xD4\xE1\a\x1C\x2\x2\xD5\xD6\a/\x2\x2"+
		"\xD6\xE1\a\"\x2\x2\xD7\xD8\a/\x2\x2\xD8\xD9\a\n\x2\x2\xD9\xDA\a-\x2\x2"+
		"\xDA\xE1\a\x3\x2\x2\xDB\xDC\a/\x2\x2\xDC\xDD\a%\x2\x2\xDD\xDE\x5\x1E\x10"+
		"\x2\xDE\xDF\a\x4\x2\x2\xDF\xE1\x3\x2\x2\x2\xE0\xD3\x3\x2\x2\x2\xE0\xD5"+
		"\x3\x2\x2\x2\xE0\xD7\x3\x2\x2\x2\xE0\xDB\x3\x2\x2\x2\xE1\x1D\x3\x2\x2"+
		"\x2\xE2\xE3\b\x10\x1\x2\xE3\xE4\a\x11\x2\x2\xE4\xF9\a/\x2\x2\xE5\xE6\a"+
		"\x11\x2\x2\xE6\xE7\a/\x2\x2\xE7\xE8\a\'\x2\x2\xE8\xF9\a-\x2\x2\xE9\xEA"+
		"\a\x11\x2\x2\xEA\xEB\a/\x2\x2\xEB\xEC\a\xE\x2\x2\xEC\xF9\a-\x2\x2\xED"+
		"\xEE\a\x15\x2\x2\xEE\xF9\a-\x2\x2\xEF\xF0\a\x11\x2\x2\xF0\xF1\a/\x2\x2"+
		"\xF1\xF2\a+\x2\x2\xF2\xF9\a-\x2\x2\xF3\xF4\a\x11\x2\x2\xF4\xF5\a/\x2\x2"+
		"\xF5\xF6\a\x13\x2\x2\xF6\xF7\a/\x2\x2\xF7\xF9\a\x12\x2\x2\xF8\xE2\x3\x2"+
		"\x2\x2\xF8\xE5\x3\x2\x2\x2\xF8\xE9\x3\x2\x2\x2\xF8\xED\x3\x2\x2\x2\xF8"+
		"\xEF\x3\x2\x2\x2\xF8\xF3\x3\x2\x2\x2\xF9\x10A\x3\x2\x2\x2\xFA\xFD\f\n"+
		"\x2\x2\xFB\xFC\a$\x2\x2\xFC\xFE\x5\x1E\x10\x2\xFD\xFB\x3\x2\x2\x2\xFE"+
		"\xFF\x3\x2\x2\x2\xFF\xFD\x3\x2\x2\x2\xFF\x100\x3\x2\x2\x2\x100\x109\x3"+
		"\x2\x2\x2\x101\x104\f\t\x2\x2\x102\x103\a&\x2\x2\x103\x105\x5\x1E\x10"+
		"\x2\x104\x102\x3\x2\x2\x2\x105\x106\x3\x2\x2\x2\x106\x104\x3\x2\x2\x2"+
		"\x106\x107\x3\x2\x2\x2\x107\x109\x3\x2\x2\x2\x108\xFA\x3\x2\x2\x2\x108"+
		"\x101\x3\x2\x2\x2\x109\x10C\x3\x2\x2\x2\x10A\x108\x3\x2\x2\x2\x10A\x10B"+
		"\x3\x2\x2\x2\x10B\x1F\x3\x2\x2\x2\x10C\x10A\x3\x2\x2\x2\x10D\x10E\t\x2"+
		"\x2\x2\x10E!\x3\x2\x2\x2\x10F\x110\a\f\x2\x2\x110\x115\a/\x2\x2\x111\x112"+
		"\a\x5\x2\x2\x112\x114\a/\x2\x2\x113\x111\x3\x2\x2\x2\x114\x117\x3\x2\x2"+
		"\x2\x115\x113\x3\x2\x2\x2\x115\x116\x3\x2\x2\x2\x116\x118\x3\x2\x2\x2"+
		"\x117\x115\x3\x2\x2\x2\x118\x119\a\x1E\x2\x2\x119#\x3\x2\x2\x2\x15)\x30"+
		"\x36>@\x9B\xB0\xB2\xBA\xBE\xCC\xD1\xE0\xF8\xFF\x106\x108\x10A\x115";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Console.App.Grammar
